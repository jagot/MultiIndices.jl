#+TITLE: MultiIndices.jl
#+AUTHOR: Stefanos Carlstr√∂m
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://travis-ci.org/jagot/MultiIndices.jl][https://travis-ci.org/jagot/MultiIndices.jl.svg?branch=master]]
[[https://coveralls.io/github/jagot/MultiIndices.jl?branch=master][https://coveralls.io/repos/github/jagot/MultiIndices.jl/badge.svg?branch=master]]
[[http://codecov.io/gh/jagot/MultiIndices.jl][http://codecov.io/gh/jagot/MultiIndices.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:julia :session *julia-MultiIndices*

* Introduction
  The idea is provide means for creating tensor product spaces that
  can be efficiently indexed into; a 3d problem, maybe described in
  Cartesian coordinates or spherical coordinates, etc,, all of which
  maybe discretized or represented using basis functions,
  etc. Depending on the choice of coordinate system, but also on the
  storage pattern of the different degrees of freedom, the sparsity
  structure of various operators will be different. MultiIndex.jl's
  purpose is to provide an efficient means of setting up these tensor
  product spaces and to use "logical" indices, which are mapped to
  linear indices in the underlying vector in the product space.


* Usage pattern
  #+BEGIN_SRC julia :exports code
    using MultiIndices
  #+END_SRC

  #+RESULTS:
  : nothing

** Cartesian grids
   A simple Cartesian 1d grid can be setup like this:
   #+BEGIN_SRC julia :exports both :results verbatim
     ùïΩ = Cartesian(1000)
   #+END_SRC

   #+RESULTS:
   : MultiIndices.Cartesian{1,(1,)}((1000,))

   while a Cartesian 2d grid can be setup like this:
   #+BEGIN_SRC julia :exports both :results verbatim
     ùñÉùñÑ = CartesianXY(100,500)
   #+END_SRC

   #+RESULTS:
   : MultiIndices.Cartesian{2,(1, 2)}((100, 500))

   =CartesianXY= indicates that X is the "fast dimension", i.e. the
   dimension whose elements are found next to each other in vector,
   while subsequent elements in Y are strided.

   We see then that the second element along the X dimension has
   linear index 2:
   #+BEGIN_SRC julia :exports both
     ùñÉùñÑ[2,1]
   #+END_SRC

   #+RESULTS:
   : 2
   while the second element along the Y dimension has the linear index
   101:
   #+BEGIN_SRC julia :exports both
     ùñÉùñÑ[1,2]
   #+END_SRC

   #+RESULTS:
   : 101


** Tensor product spaces
   As a more complicated example, the argon atom consists of 18
   electron, each of which has a position along the radial direction r,
   an angular momentum ‚Ñì, a magnetic quantum number m, and a spin. Its
   tensor product space can be created the following way:
   1) We first define the orbital angular momentum basis, which can be
      built up from a direct sum of subspaces [[https://en.wikipedia.org/wiki/Spherical_harmonics#Rotations][which are invariant
      under rotation]]. The first subspace, with ‚Ñì=0 (called s in
      [[https://en.wikipedia.org/wiki/Spectroscopic_notation][spectroscopic notation]]) has one element, m=0; the second
      subspace, ‚Ñì=1 (p) has 2‚Ñì+1=3 elements, m=-1,0,1; and so on.  If
      we want to include all ‚Ñì‚àà[0,10], we can form the space thus:
      #+BEGIN_SRC julia :exports both :results verbatim
        ùï∑ = RotationSpace(0)
        for ‚Ñì = 1:10
            ùï∑ = ùï∑ ‚äï RotationSpace(‚Ñì)
        end
        ùï∑
      #+END_SRC

      #+RESULTS:
      : MultiIndices.SumSpace{MultiIndices.RotationSpace}(MultiIndices.RotationSpace[Rot{‚Ñì = s}, Rot{‚Ñì = p}, Rot{‚Ñì = d}, Rot{‚Ñì = f}, Rot{‚Ñì = g}, Rot{‚Ñì = h}, Rot{‚Ñì = i}, Rot{‚Ñì = k}, Rot{‚Ñì = l}, Rot{‚Ñì = m}, Rot{‚Ñì = n}])

      We can query the size of this space:
      #+BEGIN_SRC julia :exports both
        size(ùï∑)
      #+END_SRC

      #+RESULTS:
      : 121
      i.e., there are 121 /partial waves/. We can also find the linear
      index of a partial wave, given its values of ‚Ñì and m (no bounds
      checking, so make sure you obey m ‚â§ |‚Ñì|):
      #+BEGIN_SRC julia :exports both :results verbatim
      ùï∑[‚Ñìm(1,1)...]
      #+END_SRC

      #+RESULTS:
      : 3 (wrong at the moment)
      Spectroscopic notation is also supported:
      #+BEGIN_SRC julia :exports both :results verbatim
      ùï∑[‚Ñìm('d',1)...]
      #+END_SRC

      #+RESULTS:
      : 4 (wrong at the moment)

   2) We then define the electron spin momentum space and the combined
      angular momentum space:
      #+BEGIN_SRC julia :exports both :results verbatim
        ùîñ = Spin{1//2}()
        ùïµ = ùï∑ ‚äó ùîñ
      #+END_SRC

      #+RESULTS:
      : MultiIndices.ProductSpace{2,(1, 2)}(MultiIndices.SumSpace{MultiIndices.RotationSpace}(MultiIndices.RotationSpace[Rot{‚Ñì = s}, Rot{‚Ñì = p}, Rot{‚Ñì = d}, Rot{‚Ñì = f}, Rot{‚Ñì = g}, Rot{‚Ñì = h}, Rot{‚Ñì = i}, Rot{‚Ñì = k}, Rot{‚Ñì = l}, Rot{‚Ñì = m}, Rot{‚Ñì = n}]), MultiIndices.Spin{1//2}())

   3) Next, we define a 1d coordinate system for the radial dimension
      and the total product space for one electron
      #+BEGIN_SRC julia :exports both :results verbatim
        ùïΩ = Cartesian(100)
        ùñÇ = ùïΩ ‚äó ùïµ
      #+END_SRC

      #+RESULTS:
      : MultiIndices.ProductSpace{3,(1, 2, 3)}(MultiIndices.Cartesian{1,(1,)}((100,)), MultiIndices.ProductSpace{2,(1, 2)}(MultiIndices.SumSpace{MultiIndices.RotationSpace}(MultiIndices.RotationSpace[Rot{‚Ñì = s}, Rot{‚Ñì = p}, Rot{‚Ñì = d}, Rot{‚Ñì = f}, Rot{‚Ñì = g}, Rot{‚Ñì = h}, Rot{‚Ñì = i}, Rot{‚Ñì = k}, Rot{‚Ñì = l}, Rot{‚Ñì = m}, Rot{‚Ñì = n}]), MultiIndices.Spin{1//2}()))
      the size of which is
      #+BEGIN_SRC julia :exports both :results verbatim
        size(ùñÇ)
      #+END_SRC

      #+RESULTS:
      : (100, 121, 2)
      as expected.

   4) With the product space for one electron ready, we can easily
      replicate it 18 times:
      #+BEGIN_SRC julia :exports both :results verbatim
        ùï± = ùñÇ ‚äó 18
      #+END_SRC

      #+RESULTS:
      : MultiIndices.CopySpace{4,(1, 2, 3, 4)}(MultiIndices.ProductSpace{3,(1, 2, 3)}(MultiIndices.Cartesian{1,(1,)}((100,)), MultiIndices.ProductSpace{2,(1, 2)}(MultiIndices.SumSpace{MultiIndices.RotationSpace}(MultiIndices.RotationSpace[Rot{‚Ñì = s}, Rot{‚Ñì = p}, Rot{‚Ñì = d}, Rot{‚Ñì = f}, Rot{‚Ñì = g}, Rot{‚Ñì = h}, Rot{‚Ñì = i}, Rot{‚Ñì = k}, Rot{‚Ñì = l}, Rot{‚Ñì = m}, Rot{‚Ñì = n}]), MultiIndices.Spin{1//2}())), 18)
      
      #+BEGIN_SRC julia :exports both :results verbatim
        size(ùï±)
      #+END_SRC

      #+RESULTS:
      : (100, 121, 2, 18)
      We now try to find the linear index of the second element along
      each dimension:
      #+BEGIN_SRC julia :exports both
        [ùï±[2,1,1,1] ùï±[1,2,1,1] ùï±[1,1,2,1] ùï±[1,1,1,2]]
      #+END_SRC

      #+RESULTS:
      | 2 | 101 | 12101 | 24201 |
      which is correct.
